// Code generated by dbus-codegen-go DO NOT EDIT.
package d_bus

import (
	"context"
	"errors"
	"fmt"
	"github.com/godbus/dbus/v5"
	"github.com/godbus/dbus/v5/introspect"
)

var (
	// Introspection for org.freedesktop.DBus
	IntrospectDataDBus = introspect.Interface{
		Name: "org.freedesktop.DBus",
		Methods: []introspect.Method{{Name: "Hello", Args: []introspect.Arg{
			{Name: "", Type: "s", Direction: "out"},
		}},
			{Name: "RequestName", Args: []introspect.Arg{
				{Name: "", Type: "s", Direction: "in"},
				{Name: "", Type: "u", Direction: "in"},
				{Name: "", Type: "u", Direction: "out"},
			}},
			{Name: "ReleaseName", Args: []introspect.Arg{
				{Name: "", Type: "s", Direction: "in"},
				{Name: "", Type: "u", Direction: "out"},
			}},
			{Name: "StartServiceByName", Args: []introspect.Arg{
				{Name: "", Type: "s", Direction: "in"},
				{Name: "", Type: "u", Direction: "in"},
				{Name: "", Type: "u", Direction: "out"},
			}},
			{Name: "UpdateActivationEnvironment", Args: []introspect.Arg{
				{Name: "", Type: "a{ss}", Direction: "in"},
			}},
			{Name: "NameHasOwner", Args: []introspect.Arg{
				{Name: "", Type: "s", Direction: "in"},
				{Name: "", Type: "b", Direction: "out"},
			}},
			{Name: "ListNames", Args: []introspect.Arg{
				{Name: "", Type: "as", Direction: "out"},
			}},
			{Name: "ListActivatableNames", Args: []introspect.Arg{
				{Name: "", Type: "as", Direction: "out"},
			}},
			{Name: "AddMatch", Args: []introspect.Arg{
				{Name: "", Type: "s", Direction: "in"},
			}},
			{Name: "RemoveMatch", Args: []introspect.Arg{
				{Name: "", Type: "s", Direction: "in"},
			}},
			{Name: "GetNameOwner", Args: []introspect.Arg{
				{Name: "", Type: "s", Direction: "in"},
				{Name: "", Type: "s", Direction: "out"},
			}},
			{Name: "ListQueuedOwners", Args: []introspect.Arg{
				{Name: "", Type: "s", Direction: "in"},
				{Name: "", Type: "as", Direction: "out"},
			}},
			{Name: "GetConnectionUnixUser", Args: []introspect.Arg{
				{Name: "", Type: "s", Direction: "in"},
				{Name: "", Type: "u", Direction: "out"},
			}},
			{Name: "GetConnectionUnixProcessID", Args: []introspect.Arg{
				{Name: "", Type: "s", Direction: "in"},
				{Name: "", Type: "u", Direction: "out"},
			}},
			{Name: "GetAdtAuditSessionData", Args: []introspect.Arg{
				{Name: "", Type: "s", Direction: "in"},
				{Name: "", Type: "ay", Direction: "out"},
			}},
			{Name: "GetConnectionSELinuxSecurityContext", Args: []introspect.Arg{
				{Name: "", Type: "s", Direction: "in"},
				{Name: "", Type: "ay", Direction: "out"},
			}},
			{Name: "ReloadConfig", Args: []introspect.Arg{}},
			{Name: "GetId", Args: []introspect.Arg{
				{Name: "", Type: "s", Direction: "out"},
			}},
			{Name: "GetConnectionCredentials", Args: []introspect.Arg{
				{Name: "", Type: "s", Direction: "in"},
				{Name: "", Type: "a{sv}", Direction: "out"},
			}},
		},
		Signals: []introspect.Signal{{Name: "NameOwnerChanged", Args: []introspect.Arg{
			{Name: "", Type: "s", Direction: ""},
			{Name: "", Type: "s", Direction: ""},
			{Name: "", Type: "s", Direction: ""},
		}},
			{Name: "NameLost", Args: []introspect.Arg{
				{Name: "", Type: "s", Direction: ""},
			}},
			{Name: "NameAcquired", Args: []introspect.Arg{
				{Name: "", Type: "s", Direction: ""},
			}},
		},
		Properties: []introspect.Property{{Name: "Features", Type: "as", Access: "read", Annotations: []introspect.Annotation{
			{Name: "org.freedesktop.DBus.Property.EmitsChangedSignal", Value: "const"},
		}},
			{Name: "Interfaces", Type: "as", Access: "read", Annotations: []introspect.Annotation{
				{Name: "org.freedesktop.DBus.Property.EmitsChangedSignal", Value: "const"},
			}},
		},
		Annotations: []introspect.Annotation{},
	}
)

// Signal is a common interface for all signals.
type Signal interface {
	Name() string
	Interface() string
	Sender() string

	path() dbus.ObjectPath
	values() []interface{}
}

// Emit sends the given signal to the bus.
func Emit(conn *dbus.Conn, s Signal) error {
	return conn.Emit(s.path(), s.Interface()+"."+s.Name(), s.values()...)
}

// ErrUnknownSignal is returned by LookupSignal when a signal cannot be resolved.
var ErrUnknownSignal = errors.New("unknown signal")

// LookupSignal converts the given raw D-Bus signal with variable body
// into one with typed structured body or returns ErrUnknownSignal error.
func LookupSignal(signal *dbus.Signal) (Signal, error) {
	switch signal.Name {
	case InterfaceDBus + "." + "NameOwnerChanged":
		v0, ok := signal.Body[0].(string)
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not string", signal.Body[0])
		}
		v1, ok := signal.Body[1].(string)
		if !ok {
			return nil, fmt.Errorf("prop .V1 is %T, not string", signal.Body[1])
		}
		v2, ok := signal.Body[2].(string)
		if !ok {
			return nil, fmt.Errorf("prop .V2 is %T, not string", signal.Body[2])
		}
		return &DBus_NameOwnerChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &DBus_NameOwnerChangedSignalBody{
				V0: v0,
				V1: v1,
				V2: v2,
			},
		}, nil
	case InterfaceDBus + "." + "NameLost":
		v0, ok := signal.Body[0].(string)
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not string", signal.Body[0])
		}
		return &DBus_NameLostSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &DBus_NameLostSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceDBus + "." + "NameAcquired":
		v0, ok := signal.Body[0].(string)
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not string", signal.Body[0])
		}
		return &DBus_NameAcquiredSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &DBus_NameAcquiredSignalBody{
				V0: v0,
			},
		}, nil
	default:
		return nil, ErrUnknownSignal
	}
}

// AddMatchSignal registers a match rule for the given signal,
// opts are appended to the automatically generated signal's rules.
func AddMatchSignal(conn *dbus.Conn, s Signal, opts ...dbus.MatchOption) error {
	return conn.AddMatchSignal(append([]dbus.MatchOption{
		dbus.WithMatchInterface(s.Interface()),
		dbus.WithMatchMember(s.Name()),
	}, opts...)...)
}

// RemoveMatchSignal unregisters the previously registered subscription.
func RemoveMatchSignal(conn *dbus.Conn, s Signal, opts ...dbus.MatchOption) error {
	return conn.RemoveMatchSignal(append([]dbus.MatchOption{
		dbus.WithMatchInterface(s.Interface()),
		dbus.WithMatchMember(s.Name()),
	}, opts...)...)
}

// Interface name constants.
const (
	InterfaceDBus = "org.freedesktop.DBus"
)

// DBuser is org.freedesktop.DBus interface.
type DBuser interface {
	// Hello is org.freedesktop.DBus.Hello method.
	Hello() (out0 string, err *dbus.Error)
	// RequestName is org.freedesktop.DBus.RequestName method.
	RequestName(in0 string, in1 uint32) (out0 uint32, err *dbus.Error)
	// ReleaseName is org.freedesktop.DBus.ReleaseName method.
	ReleaseName(in0 string) (out0 uint32, err *dbus.Error)
	// StartServiceByName is org.freedesktop.DBus.StartServiceByName method.
	StartServiceByName(in0 string, in1 uint32) (out0 uint32, err *dbus.Error)
	// UpdateActivationEnvironment is org.freedesktop.DBus.UpdateActivationEnvironment method.
	UpdateActivationEnvironment(in0 map[string]string) (err *dbus.Error)
	// NameHasOwner is org.freedesktop.DBus.NameHasOwner method.
	NameHasOwner(in0 string) (out0 bool, err *dbus.Error)
	// ListNames is org.freedesktop.DBus.ListNames method.
	ListNames() (out0 []string, err *dbus.Error)
	// ListActivatableNames is org.freedesktop.DBus.ListActivatableNames method.
	ListActivatableNames() (out0 []string, err *dbus.Error)
	// AddMatch is org.freedesktop.DBus.AddMatch method.
	AddMatch(in0 string) (err *dbus.Error)
	// RemoveMatch is org.freedesktop.DBus.RemoveMatch method.
	RemoveMatch(in0 string) (err *dbus.Error)
	// GetNameOwner is org.freedesktop.DBus.GetNameOwner method.
	GetNameOwner(in0 string) (out0 string, err *dbus.Error)
	// ListQueuedOwners is org.freedesktop.DBus.ListQueuedOwners method.
	ListQueuedOwners(in0 string) (out0 []string, err *dbus.Error)
	// GetConnectionUnixUser is org.freedesktop.DBus.GetConnectionUnixUser method.
	GetConnectionUnixUser(in0 string) (out0 uint32, err *dbus.Error)
	// GetConnectionUnixProcessID is org.freedesktop.DBus.GetConnectionUnixProcessID method.
	GetConnectionUnixProcessID(in0 string) (out0 uint32, err *dbus.Error)
	// GetAdtAuditSessionData is org.freedesktop.DBus.GetAdtAuditSessionData method.
	GetAdtAuditSessionData(in0 string) (out0 []byte, err *dbus.Error)
	// GetConnectionSELinuxSecurityContext is org.freedesktop.DBus.GetConnectionSELinuxSecurityContext method.
	GetConnectionSELinuxSecurityContext(in0 string) (out0 []byte, err *dbus.Error)
	// ReloadConfig is org.freedesktop.DBus.ReloadConfig method.
	ReloadConfig() (err *dbus.Error)
	// GetId is org.freedesktop.DBus.GetId method.
	GetId() (out0 string, err *dbus.Error)
	// GetConnectionCredentials is org.freedesktop.DBus.GetConnectionCredentials method.
	GetConnectionCredentials(in0 string) (out0 map[string]dbus.Variant, err *dbus.Error)
}

// ExportDBus exports the given object that implements org.freedesktop.DBus on the bus.
func ExportDBus(conn *dbus.Conn, path dbus.ObjectPath, v DBuser) error {
	return conn.ExportSubtreeMethodTable(map[string]interface{}{
		"Hello":                               v.Hello,
		"RequestName":                         v.RequestName,
		"ReleaseName":                         v.ReleaseName,
		"StartServiceByName":                  v.StartServiceByName,
		"UpdateActivationEnvironment":         v.UpdateActivationEnvironment,
		"NameHasOwner":                        v.NameHasOwner,
		"ListNames":                           v.ListNames,
		"ListActivatableNames":                v.ListActivatableNames,
		"AddMatch":                            v.AddMatch,
		"RemoveMatch":                         v.RemoveMatch,
		"GetNameOwner":                        v.GetNameOwner,
		"ListQueuedOwners":                    v.ListQueuedOwners,
		"GetConnectionUnixUser":               v.GetConnectionUnixUser,
		"GetConnectionUnixProcessID":          v.GetConnectionUnixProcessID,
		"GetAdtAuditSessionData":              v.GetAdtAuditSessionData,
		"GetConnectionSELinuxSecurityContext": v.GetConnectionSELinuxSecurityContext,
		"ReloadConfig":                        v.ReloadConfig,
		"GetId":                               v.GetId,
		"GetConnectionCredentials":            v.GetConnectionCredentials,
	}, path, InterfaceDBus)
}

// UnexportDBus unexports org.freedesktop.DBus interface on the named path.
func UnexportDBus(conn *dbus.Conn, path dbus.ObjectPath) error {
	return conn.Export(nil, path, InterfaceDBus)
}

// UnimplementedDBus can be embedded to have forward compatible server implementations.
type UnimplementedDBus struct{}

func (*UnimplementedDBus) iface() string {
	return InterfaceDBus
}

func (*UnimplementedDBus) Hello() (out0 string, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedDBus) RequestName(in0 string, in1 uint32) (out0 uint32, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedDBus) ReleaseName(in0 string) (out0 uint32, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedDBus) StartServiceByName(in0 string, in1 uint32) (out0 uint32, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedDBus) UpdateActivationEnvironment(in0 map[string]string) (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedDBus) NameHasOwner(in0 string) (out0 bool, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedDBus) ListNames() (out0 []string, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedDBus) ListActivatableNames() (out0 []string, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedDBus) AddMatch(in0 string) (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedDBus) RemoveMatch(in0 string) (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedDBus) GetNameOwner(in0 string) (out0 string, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedDBus) ListQueuedOwners(in0 string) (out0 []string, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedDBus) GetConnectionUnixUser(in0 string) (out0 uint32, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedDBus) GetConnectionUnixProcessID(in0 string) (out0 uint32, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedDBus) GetAdtAuditSessionData(in0 string) (out0 []byte, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedDBus) GetConnectionSELinuxSecurityContext(in0 string) (out0 []byte, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedDBus) ReloadConfig() (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedDBus) GetId() (out0 string, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedDBus) GetConnectionCredentials(in0 string) (out0 map[string]dbus.Variant, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

// NewDBus creates and allocates org.freedesktop.DBus.
func NewDBus(object dbus.BusObject) *DBus {
	return &DBus{object}
}

// DBus implements org.freedesktop.DBus D-Bus interface.
type DBus struct {
	object dbus.BusObject
}

// Hello calls org.freedesktop.DBus.Hello method.
func (o *DBus) Hello(ctx context.Context) (out0 string, err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".Hello", 0).Store(&out0)
	return
}

// RequestName calls org.freedesktop.DBus.RequestName method.
func (o *DBus) RequestName(ctx context.Context, in0 string, in1 uint32) (out0 uint32, err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".RequestName", 0, in0, in1).Store(&out0)
	return
}

// ReleaseName calls org.freedesktop.DBus.ReleaseName method.
func (o *DBus) ReleaseName(ctx context.Context, in0 string) (out0 uint32, err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".ReleaseName", 0, in0).Store(&out0)
	return
}

// StartServiceByName calls org.freedesktop.DBus.StartServiceByName method.
func (o *DBus) StartServiceByName(ctx context.Context, in0 string, in1 uint32) (out0 uint32, err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".StartServiceByName", 0, in0, in1).Store(&out0)
	return
}

// UpdateActivationEnvironment calls org.freedesktop.DBus.UpdateActivationEnvironment method.
func (o *DBus) UpdateActivationEnvironment(ctx context.Context, in0 map[string]string) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".UpdateActivationEnvironment", 0, in0).Store()
	return
}

// NameHasOwner calls org.freedesktop.DBus.NameHasOwner method.
func (o *DBus) NameHasOwner(ctx context.Context, in0 string) (out0 bool, err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".NameHasOwner", 0, in0).Store(&out0)
	return
}

// ListNames calls org.freedesktop.DBus.ListNames method.
func (o *DBus) ListNames(ctx context.Context) (out0 []string, err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".ListNames", 0).Store(&out0)
	return
}

// ListActivatableNames calls org.freedesktop.DBus.ListActivatableNames method.
func (o *DBus) ListActivatableNames(ctx context.Context) (out0 []string, err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".ListActivatableNames", 0).Store(&out0)
	return
}

// AddMatch calls org.freedesktop.DBus.AddMatch method.
func (o *DBus) AddMatch(ctx context.Context, in0 string) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".AddMatch", 0, in0).Store()
	return
}

// RemoveMatch calls org.freedesktop.DBus.RemoveMatch method.
func (o *DBus) RemoveMatch(ctx context.Context, in0 string) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".RemoveMatch", 0, in0).Store()
	return
}

// GetNameOwner calls org.freedesktop.DBus.GetNameOwner method.
func (o *DBus) GetNameOwner(ctx context.Context, in0 string) (out0 string, err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".GetNameOwner", 0, in0).Store(&out0)
	return
}

// ListQueuedOwners calls org.freedesktop.DBus.ListQueuedOwners method.
func (o *DBus) ListQueuedOwners(ctx context.Context, in0 string) (out0 []string, err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".ListQueuedOwners", 0, in0).Store(&out0)
	return
}

// GetConnectionUnixUser calls org.freedesktop.DBus.GetConnectionUnixUser method.
func (o *DBus) GetConnectionUnixUser(ctx context.Context, in0 string) (out0 uint32, err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".GetConnectionUnixUser", 0, in0).Store(&out0)
	return
}

// GetConnectionUnixProcessID calls org.freedesktop.DBus.GetConnectionUnixProcessID method.
func (o *DBus) GetConnectionUnixProcessID(ctx context.Context, in0 string) (out0 uint32, err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".GetConnectionUnixProcessID", 0, in0).Store(&out0)
	return
}

// GetAdtAuditSessionData calls org.freedesktop.DBus.GetAdtAuditSessionData method.
func (o *DBus) GetAdtAuditSessionData(ctx context.Context, in0 string) (out0 []byte, err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".GetAdtAuditSessionData", 0, in0).Store(&out0)
	return
}

// GetConnectionSELinuxSecurityContext calls org.freedesktop.DBus.GetConnectionSELinuxSecurityContext method.
func (o *DBus) GetConnectionSELinuxSecurityContext(ctx context.Context, in0 string) (out0 []byte, err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".GetConnectionSELinuxSecurityContext", 0, in0).Store(&out0)
	return
}

// ReloadConfig calls org.freedesktop.DBus.ReloadConfig method.
func (o *DBus) ReloadConfig(ctx context.Context) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".ReloadConfig", 0).Store()
	return
}

// GetId calls org.freedesktop.DBus.GetId method.
func (o *DBus) GetId(ctx context.Context) (out0 string, err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".GetId", 0).Store(&out0)
	return
}

// GetConnectionCredentials calls org.freedesktop.DBus.GetConnectionCredentials method.
func (o *DBus) GetConnectionCredentials(ctx context.Context, in0 string) (out0 map[string]dbus.Variant, err error) {
	err = o.object.CallWithContext(ctx, InterfaceDBus+".GetConnectionCredentials", 0, in0).Store(&out0)
	return
}

// GetFeatures gets org.freedesktop.DBus.Features property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = const
func (o *DBus) GetFeatures(ctx context.Context) (features []string, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceDBus, "Features").Store(&features)
	return
}

// GetInterfaces gets org.freedesktop.DBus.Interfaces property.
//
// Annotations:
//   @org.freedesktop.DBus.Property.EmitsChangedSignal = const
func (o *DBus) GetInterfaces(ctx context.Context) (interfaces []string, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceDBus, "Interfaces").Store(&interfaces)
	return
}

// DBus_NameOwnerChangedSignal represents org.freedesktop.DBus.NameOwnerChanged signal.
type DBus_NameOwnerChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *DBus_NameOwnerChangedSignalBody
}

// Name returns the signal's name.
func (s *DBus_NameOwnerChangedSignal) Name() string {
	return "NameOwnerChanged"
}

// Interface returns the signal's interface.
func (s *DBus_NameOwnerChangedSignal) Interface() string {
	return InterfaceDBus
}

// Sender returns the signal's sender unique name.
func (s *DBus_NameOwnerChangedSignal) Sender() string {
	return s.sender
}

func (s *DBus_NameOwnerChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *DBus_NameOwnerChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0, s.Body.V1, s.Body.V2}
}

// DBus_NameOwnerChangedSignalBody is body container.
type DBus_NameOwnerChangedSignalBody struct {
	V0 string
	V1 string
	V2 string
}

// DBus_NameLostSignal represents org.freedesktop.DBus.NameLost signal.
type DBus_NameLostSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *DBus_NameLostSignalBody
}

// Name returns the signal's name.
func (s *DBus_NameLostSignal) Name() string {
	return "NameLost"
}

// Interface returns the signal's interface.
func (s *DBus_NameLostSignal) Interface() string {
	return InterfaceDBus
}

// Sender returns the signal's sender unique name.
func (s *DBus_NameLostSignal) Sender() string {
	return s.sender
}

func (s *DBus_NameLostSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *DBus_NameLostSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// DBus_NameLostSignalBody is body container.
type DBus_NameLostSignalBody struct {
	V0 string
}

// DBus_NameAcquiredSignal represents org.freedesktop.DBus.NameAcquired signal.
type DBus_NameAcquiredSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *DBus_NameAcquiredSignalBody
}

// Name returns the signal's name.
func (s *DBus_NameAcquiredSignal) Name() string {
	return "NameAcquired"
}

// Interface returns the signal's interface.
func (s *DBus_NameAcquiredSignal) Interface() string {
	return InterfaceDBus
}

// Sender returns the signal's sender unique name.
func (s *DBus_NameAcquiredSignal) Sender() string {
	return s.sender
}

func (s *DBus_NameAcquiredSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *DBus_NameAcquiredSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// DBus_NameAcquiredSignalBody is body container.
type DBus_NameAcquiredSignalBody struct {
	V0 string
}
